// Scintilla source code edit control
/** @file Lexilla.cxx
 ** Lexer infrastructure.
 ** Provides entry points to shared library.
 **/
// Copyright 2019 by Neil Hodgson <neilh@scintilla.org>
// The License.txt file describes the conditions under which this software may be distributed.

#include <cstring>

#include <vector>

#if _WIN32
#define EXPORT_FUNCTION __declspec(dllexport)
#define CALLING_CONVENTION __stdcall
#else
#define EXPORT_FUNCTION __attribute__((visibility("default")))
#define CALLING_CONVENTION
#endif

#include "ILexer.h"

#include "LexerModule.h"
#include "CatalogueModules.h"

using namespace Scintilla;

//++Autogenerated -- run lexilla/scripts/LexillaGen.py to regenerate
//**\(extern LexerModule \*;\n\)
extern LexerModule lmAs;
extern LexerModule lmAsm;
extern LexerModule lmAU3;
extern LexerModule lmAVS;
extern LexerModule lmBash;
extern LexerModule lmBatch;
extern LexerModule lmCmake;
extern LexerModule lmCoffeeScript;
extern LexerModule lmConf;
extern LexerModule lmCPP;
extern LexerModule lmCPPNoCase;
extern LexerModule lmCss;
extern LexerModule lmD;
extern LexerModule lmDiff;
extern LexerModule lmHTML;
extern LexerModule lmInno;
extern LexerModule lmLatex;
extern LexerModule lmLua;
extern LexerModule lmMake;
extern LexerModule lmMarkdown;
extern LexerModule lmMatlab;
extern LexerModule lmNim;
extern LexerModule lmNsis;
extern LexerModule lmNull;
extern LexerModule lmOctave;
extern LexerModule lmPascal;
extern LexerModule lmPerl;
extern LexerModule lmPHPSCRIPT;
extern LexerModule lmPowerShell;
extern LexerModule lmProps;
extern LexerModule lmPython;
extern LexerModule lmR;
extern LexerModule lmRegistry;
extern LexerModule lmRuby;
extern LexerModule lmRust;
extern LexerModule lmSQL;
extern LexerModule lmTCL;
extern LexerModule lmVB;
extern LexerModule lmVBScript;
extern LexerModule lmVHDL;
extern LexerModule lmXML;
extern LexerModule lmYAML;

//--Autogenerated -- end of automatically generated section

// --- custom lexers ---

 extern LexerModule lmAHKL;
 extern LexerModule lmCSV;
 extern LexerModule lmDart;
 extern LexerModule lmJSON;
 extern LexerModule lmKotlin;
 extern LexerModule lmTOML;


namespace {

CatalogueModules catalogueLexilla;

void AddEachLexer() {

	if (catalogueLexilla.Count() > 0) {
		return;
	}

	//++Autogenerated -- run scripts/LexGen.py to regenerate
//**\(\tcatalogueLexilla.AddLexerModule(&\*);\n\)
	catalogueLexilla.AddLexerModule(&lmAs);
	catalogueLexilla.AddLexerModule(&lmAsm);
	catalogueLexilla.AddLexerModule(&lmAU3);
	catalogueLexilla.AddLexerModule(&lmAVS);
	catalogueLexilla.AddLexerModule(&lmBash);
	catalogueLexilla.AddLexerModule(&lmBatch);
	catalogueLexilla.AddLexerModule(&lmCmake);
	catalogueLexilla.AddLexerModule(&lmCoffeeScript);
	catalogueLexilla.AddLexerModule(&lmConf);
	catalogueLexilla.AddLexerModule(&lmCPP);
	catalogueLexilla.AddLexerModule(&lmCPPNoCase);
	catalogueLexilla.AddLexerModule(&lmCss);
	catalogueLexilla.AddLexerModule(&lmD);
	catalogueLexilla.AddLexerModule(&lmDiff);
	catalogueLexilla.AddLexerModule(&lmHTML);
	catalogueLexilla.AddLexerModule(&lmInno);
	catalogueLexilla.AddLexerModule(&lmLatex);
	catalogueLexilla.AddLexerModule(&lmLua);
	catalogueLexilla.AddLexerModule(&lmMake);
	catalogueLexilla.AddLexerModule(&lmMarkdown);
	catalogueLexilla.AddLexerModule(&lmMatlab);
	catalogueLexilla.AddLexerModule(&lmNim);
	catalogueLexilla.AddLexerModule(&lmNsis);
	catalogueLexilla.AddLexerModule(&lmNull);
	catalogueLexilla.AddLexerModule(&lmOctave);
	catalogueLexilla.AddLexerModule(&lmPascal);
	catalogueLexilla.AddLexerModule(&lmPerl);
	catalogueLexilla.AddLexerModule(&lmPHPSCRIPT);
	catalogueLexilla.AddLexerModule(&lmPowerShell);
	catalogueLexilla.AddLexerModule(&lmProps);
	catalogueLexilla.AddLexerModule(&lmPython);
	catalogueLexilla.AddLexerModule(&lmR);
	catalogueLexilla.AddLexerModule(&lmRegistry);
	catalogueLexilla.AddLexerModule(&lmRuby);
	catalogueLexilla.AddLexerModule(&lmRust);
	catalogueLexilla.AddLexerModule(&lmSQL);
	catalogueLexilla.AddLexerModule(&lmTCL);
	catalogueLexilla.AddLexerModule(&lmVB);
	catalogueLexilla.AddLexerModule(&lmVBScript);
	catalogueLexilla.AddLexerModule(&lmVHDL);
	catalogueLexilla.AddLexerModule(&lmXML);
	catalogueLexilla.AddLexerModule(&lmYAML);

//--Autogenerated -- end of automatically generated section

// --- custom lexers ---

  catalogueLexilla.AddLexerModule(&lmAHKL);
  catalogueLexilla.AddLexerModule(&lmCSV);
  catalogueLexilla.AddLexerModule(&lmDart);
  catalogueLexilla.AddLexerModule(&lmJSON);
  catalogueLexilla.AddLexerModule(&lmKotlin);
  catalogueLexilla.AddLexerModule(&lmTOML);

}

}

extern "C" {

EXPORT_FUNCTION int CALLING_CONVENTION GetLexerCount() {
	AddEachLexer();
	return catalogueLexilla.Count();
}

EXPORT_FUNCTION void CALLING_CONVENTION GetLexerName(unsigned int index, char *name, int buflength) {
	AddEachLexer();
	*name = 0;
	const char *lexerName = catalogueLexilla.Name(index);
	if (static_cast<size_t>(buflength) > strlen(lexerName)) {
		strcpy(name, lexerName);
	}
}

EXPORT_FUNCTION LexerFactoryFunction CALLING_CONVENTION GetLexerFactory(unsigned int index) {
	AddEachLexer();
	return catalogueLexilla.Factory(index);
}

EXPORT_FUNCTION ILexer5 * CALLING_CONVENTION CreateLexer(const char *name) {
	AddEachLexer();
	for (unsigned int i = 0; i < catalogueLexilla.Count(); i++) {
		const char *lexerName = catalogueLexilla.Name(i);
		if (0 == strcmp(lexerName, name)) {
			return catalogueLexilla.Create(i);
		}
	}
	return nullptr;
}

EXPORT_FUNCTION const char * CALLING_CONVENTION GetLibraryPropertyNames() {
	return "";
}

EXPORT_FUNCTION void CALLING_CONVENTION SetLibraryProperty(const char *, const char *) {
	// Null implementation
}

}
